
using System;
using System.Text;
using System.Data;
using System.Collections.Generic;
using System.Configuration;
using System.Runtime.Remoting;
using Softv.Entities;
using SoftvConfiguration;
using Globals;

namespace Softv.Providers
{
    /// <summary>
    /// Class                   : Softv.Providers.RelEncuestaClientesProvider
    /// Generated by            : Class Generator (c) 2014
    /// Description             : RelEncuestaClientes Provider
    /// File                    : RelEncuestaClientesProvider.cs
    /// Creation date           : 02/05/2016
    /// Creation time           : 06:39 p. m.
    /// </summary>
    public abstract class RelEncuestaClientesProvider : Globals.DataAccess
    {

        /// <summary>
        /// Instance of RelEncuestaClientes from DB
        /// </summary>
        private static RelEncuestaClientesProvider _Instance = null;

        private static ObjectHandle obj;
        /// <summary>
        /// Generates a RelEncuestaClientes instance
        /// </summary>
        public static RelEncuestaClientesProvider Instance
        {
            get
            {
                if (_Instance == null)
                {
                    obj = Activator.CreateInstance(
                    SoftvSettings.Settings.RelEncuestaClientes.Assembly,
                    SoftvSettings.Settings.RelEncuestaClientes.DataClass);
                    _Instance = (RelEncuestaClientesProvider)obj.Unwrap();
                }
                return _Instance;
            }
        }

        /// <summary>
        /// Provider's default constructor
        /// </summary>
        public RelEncuestaClientesProvider()
        {
        }
        /// <summary>
        /// Abstract method to add RelEncuestaClientes
        ///  /summary>
        /// <param name="RelEncuestaClientes"></param>
        /// <returns></returns>
        public abstract int AddRelEncuestaClientes(RelEncuestaClientesEntity entity_RelEncuestaClientes);

        /// <summary>
        /// Abstract method to delete RelEncuestaClientes
        /// </summary>
        public abstract int DeleteRelEncuestaClientes(int? IdProceso);

        /// <summary>
        /// Abstract method to update RelEncuestaClientes
        /// </summary>
        public abstract int EditRelEncuestaClientes(RelEncuestaClientesEntity entity_RelEncuestaClientes);

        /// <summary>
        /// Abstract method to get all RelEncuestaClientes
        /// </summary>
        public abstract List<RelEncuestaClientesEntity> GetRelEncuestaClientes();

        /// <summary>
        /// Abstract method to get all RelEncuestaClientes List<int> lid
        /// </summary>
        public abstract List<RelEncuestaClientesEntity> GetRelEncuestaClientes(List<int> lid);

        /// <summary>
        /// Abstract method to get by id
        /// </summary>
        public abstract RelEncuestaClientesEntity GetRelEncuestaClientesById(int? IdProceso);


        public abstract List<RelEncuestaClientesEntity> GetRelEncuestaClientesByIdEncuesta(int? IdEncuesta);

        public abstract List<RelEncuestaClientesEntity> GetRelEncuestaClientesByCONTRATO(long? Contrato);

        public abstract List<RelEncuestaClientesEntity> GetRelEncuestaClientesByIdProceso(int? IdProceso);


        /// <summary>
        ///Get RelEncuestaClientes
        ///</summary>
        public abstract SoftvList<RelEncuestaClientesEntity> GetPagedList(int pageIndex, int pageSize);

        /// <summary>
        ///Get RelEncuestaClientes
        ///</summary>
        public abstract SoftvList<RelEncuestaClientesEntity> GetPagedList(int pageIndex, int pageSize, String xml);

        /// <summary>
        /// Converts data from reader to entity
        /// </summary>
        protected virtual RelEncuestaClientesEntity GetRelEncuestaClientesFromReader(IDataReader reader)
        {
            RelEncuestaClientesEntity entity_RelEncuestaClientes = null;
            try
            {
                entity_RelEncuestaClientes = new RelEncuestaClientesEntity();
                entity_RelEncuestaClientes.IdProceso = (int?)(GetFromReader(reader, "IdProceso"));
                entity_RelEncuestaClientes.IdEncuesta = (int?)(GetFromReader(reader, "IdEncuesta"));
                entity_RelEncuestaClientes.Contrato = (long?)(GetFromReader(reader, "Contrato"));
                entity_RelEncuestaClientes.IdConexion = (int?)(GetFromReader(reader, "IdConexion"));
                entity_RelEncuestaClientes.FechaApli = (DateTime?)(GetFromReader(reader, "FechaApli"));

            }
            catch (Exception ex)
            {
                throw new Exception("Error converting RelEncuestaClientes data to entity", ex);
            }
            return entity_RelEncuestaClientes;
        }

    }

    #region Customs Methods

    #endregion
}

