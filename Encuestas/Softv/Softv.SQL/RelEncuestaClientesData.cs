
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using System.Data.SqlClient;
using Softv.Entities;
using Softv.Providers;
using SoftvConfiguration;
using Globals;

namespace Softv.DAO
{
    /// <summary>
    /// Class                   : Softv.DAO.RelEncuestaClientesData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : RelEncuestaClientes Data Access Object
    /// File                    : RelEncuestaClientesDAO.cs
    /// Creation date           : 02/05/2016
    /// Creation time           : 06:39 p. m.
    ///</summary>
    public class RelEncuestaClientesData : RelEncuestaClientesProvider
    {
        /// <summary>
        ///</summary>
        /// <param name="RelEncuestaClientes"> Object RelEncuestaClientes added to List</param>
        public override int AddRelEncuestaClientes(RelEncuestaClientesEntity entity_RelEncuestaClientes)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaClientes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaClientesAdd", connection);

                AssingParameter(comandoSql, "@IdProceso", null, pd: ParameterDirection.Output, IsKey: true);

                AssingParameter(comandoSql, "@IdEncuesta", entity_RelEncuestaClientes.IdEncuesta);

                AssingParameter(comandoSql, "@Contrato", entity_RelEncuestaClientes.Contrato);

                AssingParameter(comandoSql, "@FechaApli", entity_RelEncuestaClientes.FechaApli);

                AssingParameter(comandoSql, "@IdConexion", entity_RelEncuestaClientes.IdConexion);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding RelEncuestaClientes " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
                result = (int)comandoSql.Parameters["@IdProceso"].Value;
            }
            return result;
        }

        /// <summary>
        /// Deletes a RelEncuestaClientes
        ///</summary>
        /// <param name="">  IdProceso to delete </param>
        public override int DeleteRelEncuestaClientes(int? IdProceso)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaClientes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaClientesDelete", connection);

                AssingParameter(comandoSql, "@IdProceso", IdProceso);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error deleting RelEncuestaClientes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Edits a RelEncuestaClientes
        ///</summary>
        /// <param name="RelEncuestaClientes"> Objeto RelEncuestaClientes a editar </param>
        public override int EditRelEncuestaClientes(RelEncuestaClientesEntity entity_RelEncuestaClientes)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaClientes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaClientesEdit", connection);

                AssingParameter(comandoSql, "@IdProceso", entity_RelEncuestaClientes.IdProceso);

                AssingParameter(comandoSql, "@IdEncuesta", entity_RelEncuestaClientes.IdEncuesta);

                AssingParameter(comandoSql, "@Contrato", entity_RelEncuestaClientes.Contrato);

                AssingParameter(comandoSql, "@FechaApli", entity_RelEncuestaClientes.FechaApli);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();

                    result = int.Parse(ExecuteNonQuery(comandoSql).ToString());

                }
                catch (Exception ex)
                {
                    throw new Exception("Error updating RelEncuestaClientes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Gets all RelEncuestaClientes
        ///</summary>
        public override List<RelEncuestaClientesEntity> GetRelEncuestaClientes()
        {
            List<RelEncuestaClientesEntity> RelEncuestaClientesList = new List<RelEncuestaClientesEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaClientes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaClientesGet", connection);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        RelEncuestaClientesList.Add(GetRelEncuestaClientesFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelEncuestaClientes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return RelEncuestaClientesList;
        }

        /// <summary>
        /// Gets all RelEncuestaClientes by List<int>
        ///</summary>
        public override List<RelEncuestaClientesEntity> GetRelEncuestaClientes(List<int> lid)
        {
            List<RelEncuestaClientesEntity> RelEncuestaClientesList = new List<RelEncuestaClientesEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaClientes.ConnectionString))
            {
                DataTable IdDT = BuildTableID(lid);

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaClientesGetByIds", connection);
                AssingParameter(comandoSql, "@IdTable", IdDT);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        RelEncuestaClientesList.Add(GetRelEncuestaClientesFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelEncuestaClientes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return RelEncuestaClientesList;
        }

        /// <summary>
        /// Gets RelEncuestaClientes by
        ///</summary>
        public override RelEncuestaClientesEntity GetRelEncuestaClientesById(int? IdProceso)
        {
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaClientes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaClientesGetById", connection);
                RelEncuestaClientesEntity entity_RelEncuestaClientes = null;


                AssingParameter(comandoSql, "@IdProceso", IdProceso);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
                    if (rd.Read())
                        entity_RelEncuestaClientes = GetRelEncuestaClientesFromReader(rd);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelEncuestaClientes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entity_RelEncuestaClientes;
            }

        }


        public override List<RelEncuestaClientesEntity> GetRelEncuestaClientesByIdEncuesta(int? IdEncuesta)
        {
            List<RelEncuestaClientesEntity> RelEncuestaClientesList = new List<RelEncuestaClientesEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaClientes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaClientesGetByIdEncuesta", connection);

                AssingParameter(comandoSql, "@IdEncuesta", IdEncuesta);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        RelEncuestaClientesList.Add(GetRelEncuestaClientesFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelEncuestaClientes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return RelEncuestaClientesList;
        }

        public override List<RelEncuestaClientesEntity> GetRelEncuestaClientesByCONTRATO(long? Contrato)
        {
            List<RelEncuestaClientesEntity> RelEncuestaClientesList = new List<RelEncuestaClientesEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaClientes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaClientesGetByCONTRATO", connection);

                AssingParameter(comandoSql, "@Contrato", Contrato);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        RelEncuestaClientesList.Add(GetRelEncuestaClientesFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelEncuestaClientes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return RelEncuestaClientesList;
        }

        public override List<RelEncuestaClientesEntity> GetRelEncuestaClientesByIdProceso(int? IdProceso)
        {
            List<RelEncuestaClientesEntity> RelEncuestaClientesList = new List<RelEncuestaClientesEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaClientes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaClientesGetByIdProceso", connection);

                AssingParameter(comandoSql, "@IdProceso", IdProceso);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        RelEncuestaClientesList.Add(GetRelEncuestaClientesFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelEncuestaClientes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return RelEncuestaClientesList;
        }


        /// <summary>
        ///Get RelEncuestaClientes
        ///</summary>
        public override SoftvList<RelEncuestaClientesEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<RelEncuestaClientesEntity> entities = new SoftvList<RelEncuestaClientesEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaClientes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaClientesGetPaged", connection);

                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@pageSize", pageSize);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetRelEncuestaClientesFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelEncuestaClientes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetRelEncuestaClientesCount();
                return entities ?? new SoftvList<RelEncuestaClientesEntity>();
            }
        }

        /// <summary>
        ///Get RelEncuestaClientes
        ///</summary>
        public override SoftvList<RelEncuestaClientesEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<RelEncuestaClientesEntity> entities = new SoftvList<RelEncuestaClientesEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaClientes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaClientesGetPagedXml", connection);

                AssingParameter(comandoSql, "@pageSize", pageSize);
                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@xml", xml);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetRelEncuestaClientesFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelEncuestaClientes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetRelEncuestaClientesCount(xml);
                return entities ?? new SoftvList<RelEncuestaClientesEntity>();
            }
        }

        /// <summary>
        ///Get Count RelEncuestaClientes
        ///</summary>
        public int GetRelEncuestaClientesCount()
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaClientes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaClientesGetCount", connection);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelEncuestaClientes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        /// <summary>
        ///Get Count RelEncuestaClientes
        ///</summary>
        public int GetRelEncuestaClientesCount(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaClientes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaClientesGetCountXml", connection);

                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelEncuestaClientes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        #region Customs Methods

        #endregion
    }
}
