
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;
using System.Data.SqlClient;
using SoftvMVC.Controllers;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.CLIENTEController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : CLIENTEController
    /// File                    : CLIENTEController.cs
    /// Creation date           : 02/05/2016
    /// Creation time           : 06:30 p. m.
    ///</summary>
    public partial class CLIENTEController : BaseController, IDisposable
    {
        private SoftvService.CLIENTEClient proxy = null;
        private SoftvService.ConexionClient proxycon = null;
        public CLIENTEController()
        {


            proxy = new SoftvService.CLIENTEClient();
            proxycon = new SoftvService.ConexionClient();
        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("CLIENTE");           
            List<ConexionEntity> conexiones = proxycon.GetConexionList();

            ViewData["Conexiones"] = conexiones;
            return View();

           
        }




  

       
 

  

        //Nuevas funciones 

        public ActionResult GetClienteByNombre(string Nombre)
        {

            List<CLIENTEEntity> Lista = proxy.GetCLIENTEList().Where(x => x.NOMBRE.Contains(Nombre)).ToList();
            return Json(Lista, JsonRequestBehavior.AllowGet);
        }



        public ActionResult ListaClientes()
        {
            List<CLIENTEEntity> Lista = proxy.GetCLIENTEList().ToList();
            return Json(Lista, JsonRequestBehavior.AllowGet);

        }


        



        public ActionResult GetList(int plaza,string contrato,string cliente,string direccion, int draw, int start, int length)
        {
            DataTableData dataTableData = new DataTableData();
            dataTableData.draw = draw;
            dataTableData.recordsTotal = 0;
            int recordsFiltered = 0;
            dataTableData.data = FiltrarContenido(plaza, contrato, cliente, direccion ,ref recordsFiltered, start, length);
            dataTableData.recordsFiltered = recordsFiltered;
            
            return Json(dataTableData, JsonRequestBehavior.AllowGet);
        }




        private List<CLIENTEEntity2> FiltrarContenido(int plaza, string contrato, string cliente, string direccion, ref int recordFiltered, int start, int length)
        {
            recordFiltered = GetClientesporPlaza(plaza, contrato, cliente, direccion).Count;
            int rango = start + length;
            return GetClientesporPlaza(plaza, contrato, cliente, direccion).Skip(start).Take(length).ToList();
        }



        public ActionResult DetalleCliente(int id, string contrato)
        {
            List<CLIENTEEntity2> LISTA = GetClientesporPlaza(id, contrato,"","");
            return Json(LISTA,JsonRequestBehavior.AllowGet);
        }


        public ActionResult GetClientesporPlazaJson(int id, string contrato, string cliente1, string direccion)
        {
            List<CLIENTEEntity2> lista= GetClientesporPlaza(id,  contrato,  cliente1,  direccion);

            return Json(lista, JsonRequestBehavior.AllowGet);
        }



        public List<CLIENTEEntity2> GetClientesporPlaza(int id,string  contrato, string cliente1, string direccion)
        {

            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<CLIENTEEntity2> lista = new List<CLIENTEEntity2>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(id));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }
            if (contrato !="")
            {
                 comandoSql = new SqlCommand("select * from CLIENTES x1 join CALLES x2 on x1.Clv_Calle=x2.Clv_Calle JOIN COLONIAS X3 ON X3.Clv_Colonia=x1.Clv_Colonia JOIN CIUDADES X4 ON X4.Clv_Ciudad=x1.Clv_Ciudad where x1.contrato="+contrato);
            }
            else if (cliente1 !="")
            {
                comandoSql = new SqlCommand(" select * from CLIENTES x1 join CALLES x2 on x1.Clv_Calle=x2.Clv_Calle JOIN COLONIAS X3 ON X3.Clv_Colonia=x1.Clv_Colonia JOIN CIUDADES X4 ON X4.Clv_Ciudad=x1.Clv_Ciudad where x1.Nombre like '%"+cliente1+"%' ");
            }
            else if (direccion !="")
            {
                comandoSql = new SqlCommand("select * from CLIENTES x1 join CALLES x2 on x1.Clv_Calle=x2.Clv_Calle JOIN COLONIAS X3 ON X3.Clv_Colonia=x1.Clv_Colonia JOIN CIUDADES X4 ON X4.Clv_Ciudad=x1.Clv_Ciudad where x2.Nombre like '%"+direccion+"%'");
            }
            else
            {
                 comandoSql = new SqlCommand("select * from CLIENTES x1 join CALLES x2 on x1.Clv_Calle=x2.Clv_Calle JOIN COLONIAS X3 ON X3.Clv_Colonia=x1.Clv_Colonia JOIN CIUDADES X4 ON X4.Clv_Ciudad=x1.Clv_Ciudad");
            }
            
            comandoSql.Connection = conexionSQL;
            SqlDataReader reader = comandoSql.ExecuteReader();
            if (reader.HasRows)
            {
                while (reader.Read())
                {
                    CLIENTEEntity2 cliente = new CLIENTEEntity2();
                    cliente.CONTRATO = Int32.Parse(reader[0].ToString());
                    cliente.NOMBRE = reader[1].ToString();
                    cliente.Clv_Calle = Int32.Parse(reader[2].ToString());
                    cliente.NUMERO = reader[3].ToString();
                    cliente.ENTRECALLES = reader[4].ToString();
                    cliente.Clv_Colonia = Int32.Parse(reader[5].ToString());
                    cliente.CodigoPostal = reader[6].ToString();
                    cliente.TELEFONO = reader[7].ToString();
                    cliente.CELULAR = reader[8].ToString();

                    cliente.DESGLOSA_Iva = bool.Parse(reader[9].ToString());
                    cliente.SoloInternet = bool.Parse(reader[10].ToString());
                    cliente.eshotel = bool.Parse(reader[11].ToString());
                    cliente.Clv_Ciudad = Int32.Parse(reader[12].ToString());
                    cliente.Email = reader[13].ToString();
                    cliente.clv_sector = Int32.Parse(reader[14].ToString());
                    cliente.Clv_Periodo = Int32.Parse(reader[15].ToString());
                    cliente.Clv_Tap = Int32.Parse(reader[16].ToString());
                    cliente.Zona2 = bool.Parse(reader[17].ToString());
                    cliente.conexion = id;
                    cliente.Calle = reader[19].ToString();
                    cliente.Colonia = reader[21].ToString();
                    cliente.Ciudad = reader[23].ToString();

                    lista.Add(cliente);

                }
            }
            return lista;
        }


        public ActionResult GetDetalleFiscal(int contrato,int plaza)
        {

            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            DatoFiscalEntity datos = new DatoFiscalEntity();
            List<CLIENTEEntity2> lista = new List<CLIENTEEntity2>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(plaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }           
            comandoSql = new SqlCommand("SELECT * FROM DatosFiscales where Contrato=" + contrato);
            
            
            comandoSql.Connection = conexionSQL;
            SqlDataReader reader = comandoSql.ExecuteReader();
            if (reader.HasRows)
            {
                while (reader.Read())
                {
                    
                    datos.Contrato=Int32.Parse(reader[0].ToString());
                    datos.RAZON_SOCIAL=reader[2].ToString();
                    datos.RFC=reader[3].ToString();
                    datos.CALLE_RS=reader[4].ToString();
                    datos.NUMERO_RS=reader[5].ToString();
                    datos.ENTRECALLES=reader[6].ToString();
                    datos.COLONIA_RS=reader[7].ToString();
                    datos.CIUDAD_RS=reader[8].ToString();
                    datos.ESTADO_RS=reader[9].ToString();
                    datos.CP_RS=reader[10].ToString();
                    datos.TELEFONO_RS=reader[11].ToString();
                    datos.FAX_RS=reader[12].ToString();                    
                    datos.IDENTIFICADOR=Int32.Parse(reader[14].ToString());
                    datos.CURP=reader[15].ToString();
                    datos.id_asociado=Int32.Parse(reader[16].ToString());

                }
            }

            return Json(datos,JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetClientesPorCoincidencia(int conexion)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<CLIENTEEntity2> lista = new List<CLIENTEEntity2>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(conexion));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }

            comandoSql = new SqlCommand("SELECT * FROM CLIENTES");
            comandoSql.Connection = conexionSQL;
            SqlDataReader reader = comandoSql.ExecuteReader();
            if (reader.HasRows)
            {
                while (reader.Read())
                {
                    CLIENTEEntity2 cliente = new CLIENTEEntity2();
                    cliente.CONTRATO = Int32.Parse(reader[0].ToString());
                    cliente.NOMBRE = reader[1].ToString();
                    cliente.Clv_Calle = Int32.Parse(reader[2].ToString());
                    cliente.NUMERO = reader[3].ToString();
                    cliente.ENTRECALLES = reader[4].ToString();
                    cliente.Clv_Colonia = Int32.Parse(reader[5].ToString());
                    cliente.CodigoPostal = reader[6].ToString();
                    cliente.TELEFONO = reader[7].ToString();
                    cliente.CELULAR = reader[8].ToString();

                    cliente.DESGLOSA_Iva = bool.Parse(reader[9].ToString());
                    cliente.SoloInternet = bool.Parse(reader[10].ToString());
                    cliente.eshotel = bool.Parse(reader[11].ToString());
                    cliente.Clv_Ciudad = Int32.Parse(reader[12].ToString());
                    cliente.Email = reader[13].ToString();
                    cliente.clv_sector = Int32.Parse(reader[14].ToString());
                    cliente.Clv_Periodo = Int32.Parse(reader[15].ToString());
                    cliente.Clv_Tap = Int32.Parse(reader[16].ToString());
                    cliente.Zona2 = bool.Parse(reader[17].ToString());
                    cliente.conexion = conexion;
                    lista.Add(cliente);

                }
            }
           return Json(lista,JsonRequestBehavior.AllowGet);
        }


        public ActionResult UpdateCliente(CLIENTEEntity2 cliente, DatoFiscalEntity fiscales)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            SqlCommand comandoSql2;         
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(cliente.conexion));
            int result = 0;
            try
            {
                conexionSQL.Open();
            }
            catch
            { }
            try
            {
                comandoSql = new SqlCommand(@"UPDATE CLIENTES SET Nombre=@nombre,Clv_Calle=@calle,Numero=@numero,EntreCalles=@calles,Clv_Colonia=@colonia,CodigoPostal=@cp,Telefono=@telefono,Celular=@celular,Clv_Ciudad=@cuidad,Email=@email where contrato="+cliente.CONTRATO);
                comandoSql.Connection = conexionSQL;
                comandoSql.Parameters.AddWithValue("@nombre", cliente.NOMBRE);
                comandoSql.Parameters.AddWithValue("@calle", cliente.Clv_Calle);
                comandoSql.Parameters.AddWithValue("@numero",cliente.NUMERO);
                comandoSql.Parameters.AddWithValue("@calles", cliente.ENTRECALLES);
                comandoSql.Parameters.AddWithValue("@colonia", cliente.Clv_Colonia);
                comandoSql.Parameters.AddWithValue("@cp", cliente.CodigoPostal);
                comandoSql.Parameters.AddWithValue("@telefono", cliente.TELEFONO);
                comandoSql.Parameters.AddWithValue("@celular", cliente.CELULAR);
                comandoSql.Parameters.AddWithValue("@cuidad", cliente.Clv_Ciudad);
                comandoSql.Parameters.AddWithValue("@email", cliente.Email);
                comandoSql.ExecuteNonQuery();
                result = 1;
            }
            catch { }

            try
            {
                comandoSql2 = new SqlCommand("UPDATE DatosFiscales set Razon_Social=" + fiscales.RAZON_SOCIAL + ",RFC=" + fiscales.RFC + ",Calle_RS=" + fiscales.CALLE_RS + ",Numero_RS=" + fiscales.NUMERO_RS + ",EntreCalles=" + fiscales.ENTRECALLES + ",Colonia_RS=" + fiscales.COLONIA_RS + ",Ciudad_RS=" + fiscales.CIUDAD_RS + ",Estado_RS=" + fiscales.ESTADO_RS + ",CP_RS=" + fiscales.CP_RS + ",Telefono_RS=" + fiscales.TELEFONO_RS + ",Fax_RS=" + fiscales.FAX_RS + ",CURP="+fiscales.CURP+" where contrato="+cliente.CONTRATO);
                comandoSql2.Connection = conexionSQL;

                comandoSql2.ExecuteNonQuery();
            }
            catch { }

            return Json(result,JsonRequestBehavior.AllowGet);
        }



        public class DataTableData
        {
            public int draw { get; set; }
            public int recordsTotal { get; set; }
            public int recordsFiltered { get; set; }
            public List<CLIENTEEntity2> data { get; set; }
        }

        public class CLIENTEEntity2
        {
            
            public long? CONTRATO { get; set; }      
            
            public String NOMBRE { get; set; }
           
            public int? Clv_Calle { get; set; }
          
            public String NUMERO { get; set; }
         
            public String ENTRECALLES { get; set; }
            
            public int? Clv_Colonia { get; set; }
          
            public String CodigoPostal { get; set; }
           
           
            public String TELEFONO { get; set; }
          
            public String CELULAR { get; set; }
           
            public bool? DESGLOSA_Iva { get; set; }
          
            public bool? SoloInternet { get; set; }
           
            public bool? eshotel { get; set; }
            
            public int? Clv_Ciudad { get; set; }
            
            public String Email { get; set; }
         
            public int? clv_sector { get; set; }
          
            public int? Clv_Periodo { get; set; }
            
            public int? Clv_Tap { get; set; }
            
            public bool? Zona2 { get; set; }

            public int conexion { get; set; }

            public string Calle { get; set; }

            public string Colonia { get; set; }

            public string Ciudad { get; set; }
          
        }



    }

}

